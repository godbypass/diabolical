cmake_minimum_required(VERSION 3.8)
project(native_library)
set(CMAKE_CXX_STANDARD 17)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY build/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY build/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY build/lib)

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
        message(FATAL_ERROR "GCC version must be at least 6.0!")
    endif()
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -s -DNDEBUG")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY build/lib)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG build/lib)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE build/lib)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY build/lib)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG build/lib)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE build/lib)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP8 /wd4102 /wd4101 /EHsc")
else()
    message(FATAL_ERROR "You are using an unsupported compiler! Compilation has only been tested with MSVC and GCC.")
endif()

find_package(JNI REQUIRED)
include_directories(${JNI_INCLUDE_DIRS})

set(CLASS_FILES output/wtf_diablo_launcher_temporary_LauncherInstance_0.hpp output/wtf_diablo_launcher_temporary_LauncherInstance_0.cpp output/wtf_diablo_launcher_temporary_Main_1.hpp output/wtf_diablo_launcher_temporary_Main_1.cpp output/wtf_diablo_launcher_temporary_session_DiabloRankEnum_2.hpp output/wtf_diablo_launcher_temporary_session_DiabloRankEnum_2.cpp output/wtf_diablo_launcher_temporary_session_DiabloSession_3.hpp output/wtf_diablo_launcher_temporary_session_DiabloSession_3.cpp output/wtf_diablo_launcher_temporary_util_Constants_4.hpp output/wtf_diablo_launcher_temporary_util_Constants_4.cpp output/wtf_diablo_hwid_CryptoUtil_5.hpp output/wtf_diablo_hwid_CryptoUtil_5.cpp output/wtf_diablo_hwid_HwidUtil_6.hpp output/wtf_diablo_hwid_HwidUtil_6.cpp)
set(MAIN_FILES native_jvm.hpp native_jvm.cpp native_jvm_output.hpp native_jvm_output.cpp string_pool.hpp string_pool.cpp)
add_library(native_library SHARED ${CLASS_FILES} ${MAIN_FILES})
