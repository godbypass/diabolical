package wtf.diablo.client.module.impl.exploit.disabler;

import best.azura.eventbus.core.EventPriority;
import best.azura.eventbus.handler.EventHandler;
import best.azura.eventbus.handler.Listener;
import com.mojang.realmsclient.gui.ChatFormatting;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.Vec3;
import wtf.diablo.client.core.impl.Diablo;
import wtf.diablo.client.event.api.EventTypeEnum;
import wtf.diablo.client.event.impl.client.renderering.OverlayEvent;
import wtf.diablo.client.event.impl.network.RecievePacketEvent;
import wtf.diablo.client.event.impl.network.SendPacketEvent;
import wtf.diablo.client.event.impl.player.motion.MotionEvent;
import wtf.diablo.client.event.impl.player.motion.MoveEvent;
import wtf.diablo.client.module.api.data.AbstractModule;
import wtf.diablo.client.module.api.data.ModuleCategoryEnum;
import wtf.diablo.client.module.api.data.ModuleMetaData;
import wtf.diablo.client.module.impl.movement.SprintModule;
import wtf.diablo.client.module.impl.movement.speed.SpeedModule;
import wtf.diablo.client.module.impl.player.InventoryManagerModule;
import wtf.diablo.client.module.impl.render.ColorModule;
import wtf.diablo.client.pathfinding.impl.WalkingPlayerPathFinder;
import wtf.diablo.client.setting.impl.ModeSetting;
import wtf.diablo.client.util.mc.player.movement.CollisionUtils;
import wtf.diablo.client.util.mc.player.movement.MovementUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@ModuleMetaData(
        name = "Disabler",
        description = "Disables anti cheat's checks",
        category = ModuleCategoryEnum.EXPLOIT
)
public final class DisablerModule extends AbstractModule {
    private final ModeSetting<DisablerModeEnum> mode = new ModeSetting<>("Mode", DisablerModeEnum.WATCHDOG);

    private int ticks;
    private boolean cancelAll, pikatrolled;
    private short lastUID;
    private Vec3 lastSent;

    private boolean allowStrafe;

    private final List<Packet<?>> packetList = new ArrayList<>();

    private double direction;

    private boolean startSpoof;

    private double lastX, lastY, lastZ;

    public DisablerModule() {
        this.registerSettings(mode);
        this.toggle(false);
    }

    @Override
    protected void onEnable() {
        super.onEnable();
        this.ticks = 0;
        this.lastUID = 0;
        this.pikatrolled = false;

        this.packetList.clear();

    }

    @Override
    protected void onDisable() {
        super.onDisable();
        this.packetList.clear();
    }

    @EventHandler(EventPriority.HIGHEST)
    public final Listener<MoveEvent> updateEventListener = e -> {
        if (Objects.requireNonNull(mode.getValue()) == DisablerModeEnum.INVADEDLANDS) {
            if (mc.getTimer().timerSpeed > 1.0) {
                ticks += 3;
            }
        }
    };


    @EventHandler
    private final Listener<SendPacketEvent> eventSendPacketListener = event -> {
        this.setSuffix(mode.getValue().getName());

        switch (mode.getValue()) {
            case WATCHDOG:
                if (event.getPacket() instanceof C16PacketClientStatus && Diablo.getInstance().getModuleRepository().getModuleInstance(InventoryManagerModule.class).isEnabled()) {
                    final C16PacketClientStatus wrapper = (C16PacketClientStatus) event.getPacket();
                    if (wrapper.getStatus() == C16PacketClientStatus.EnumState.OPEN_INVENTORY_ACHIEVEMENT) {
                        event.setCancelled(true);
                    }
                }

                if (event.getPacket() instanceof C0BPacketEntityAction && Diablo.getInstance().getModuleRepository().getModuleInstance(SprintModule.class).isEnabled()) {
                    event.setCancelled(true);
                }
                break;

            case WATCHDOG_EXPERIMENTAL:
                if (!Diablo.getInstance().getModuleRepository().getModuleInstance(SpeedModule.class).isEnabled())
                    return;


                if (event.getPacket() instanceof C03PacketPlayer) {
                    final C03PacketPlayer packet = (C03PacketPlayer) event.getPacket();

                    if (!mc.thePlayer.isCollided) {
                        this.lastX = packet.getPositionX();
                        this.lastZ = packet.getPositionZ();
                    }

                    if (mc.thePlayer.onGround) {
                        this.lastY = packet.getPositionY();
                    }
                }

                final WalkingPlayerPathFinder pathFinder = MovementUtil.PATH_FINDER_LEGIT;

                final WalkingPlayerPathFinder finalPathFinder = pathFinder.setDestination(new BlockPos(mc.thePlayer), new BlockPos(mc.thePlayer.posX - 1, mc.thePlayer.posY, mc.thePlayer.posZ + 1));

                finalPathFinder.createPath(mc.theWorld);

                if (event.getPacket() instanceof C0BPacketEntityAction && Diablo.getInstance().getModuleRepository().getModuleInstance(SprintModule.class).isEnabled()) {
                    event.setCancelled(true);
                }

                break;

            case INVADEDLANDS:
                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer packet = (C03PacketPlayer) event.getPacket();
                    if (!mc.thePlayer.isUsingItem() && !packet.isMoving() && !packet.getRotating()) {
                        if (mc.thePlayer.ticksExisted % 2 == 0) {
                            event.setCancelled(true);
                            ticks -= 8;
                        }
                    }
                    packet.setMoving(false);
                    packet.setRotating(false);
                }
                break;
            case VULCAN_SYNC:
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction c0f = (C0FPacketConfirmTransaction) event.getPacket();

                    if (c0f.getUid() < -29000) {
                        event.setCancelled(true);
                    }
                }
                break;
            case PIKANETWORK:
                if (event.getPacket() instanceof C03PacketPlayer && this.pikatrolled) {
                    ((C03PacketPlayer) event.getPacket()).setOnGround(false);
                }
                break;
            case BUZZ_FULL:
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction c = (C0FPacketConfirmTransaction) event.getPacket();

                    if (Math.abs(lastUID - c.getUid()) > 50 && mc.thePlayer.ticksExisted < 20)
                        lastUID = c.getUid();
                }

                if (event.getPacket() instanceof C03PacketPlayer) {
                    mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C0FPacketConfirmTransaction(0, lastUID, true));
                    lastUID++;
                }
                break;
            case AGC_PING:
                if (event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(true);
                    mc.thePlayer.sendQueue.sendPacketDelayed(event.getPacket(), (int) (500 + (Math.random() * 50)));
                }
                break;
            case VERUS:
                if (event.getPacket() instanceof C0FPacketConfirmTransaction || (event.getPacket() instanceof C00PacketKeepAlive && mc.thePlayer.ticksExisted % 13 != 0)) {
                    event.setCancelled(true);
                }

                if (event.getPacket() instanceof C03PacketPlayer) {

                    if (!(event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition || event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook || event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook) && mc.thePlayer.ticksExisted % 50 != 0)
                        event.setCancelled(true);
                }
                break;
            case VOLTYUM:
                if (MovementUtil.getBlocksPerSecond() < 14 && mc.thePlayer.motionY < 0.6) return;

                if (event.getPacket() instanceof C03PacketPlayer && !MovementUtil.isMoving()) {
                    C03PacketPlayer cpp = (C03PacketPlayer) event.getPacket();
                    if (!mc.theWorld.isAirBlock(new BlockPos(cpp.getPositionX(), cpp.getPositionY() - 1, cpp.getPositionZ())))
                        cpp.setOnGround(true);

                    event.setCancelled(true);
                }
                if (mc.thePlayer.hurtTime != 0 && event.getPacket() instanceof C0FPacketConfirmTransaction) event.setCancelled(true);

                if (lastSent == null) lastSent = mc.thePlayer.getPositionVector();

                if ((mc.thePlayer.getDistance(lastSent.xCoord, lastSent.yCoord, lastSent.zCoord) > 8 || mc.thePlayer.isEating())) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                    lastSent = mc.thePlayer.getPositionVector();
                }
                break;
            case DAC:
                if (lastSent == null) lastSent = mc.thePlayer.getPositionVector();

                if (event.getPacket() instanceof C03PacketPlayer && !(event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook))
                    event.setCancelled(true);

                if (mc.thePlayer.getDistance(lastSent.xCoord, lastSent.yCoord, lastSent.zCoord) > 0.3 || mc.thePlayer.isEating()) {
                    float goaly = (float) (mc.thePlayer.posY - lastSent.yCoord);
                    System.out.println(goaly);

                    if (Math.abs(goaly) >= 0.6) {
                        for (double i = 0; i < goaly; i += 0.1) {
                            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, lastSent.yCoord + i, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, false));
                            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, lastSent.yCoord, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, false));
                        }
                    }

                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY + (mc.thePlayer.onGround ? 0.1 : 0), mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
                    lastSent = mc.thePlayer.getPositionVector();
                }
                break;
            case HAZEL_MC:
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) event.setCancelled(true);
                break;

        }
    };

    @EventHandler
    private final Listener<RecievePacketEvent> recievePacketEventListener = event -> {
        if (mc.thePlayer == null)
            return;

        final Packet<?> p = event.getPacket();
        switch (this.mode.getValue()) {
            case MUNCHY:
                if(mc.thePlayer.ticksExisted < 20)
                    cancelAll = false;

                if (cancelAll) event.setCancelled(true);

                if (p instanceof S02PacketChat) {
                    String chat = ((S02PacketChat)p).getChatComponent().getFormattedText();

                    if(chat.contains("removed") && chat.contains(mc.thePlayer.getName())) {
                        cancelAll = true;
                    }
                }
                break;
            case DAC:
                if(p instanceof S08PacketPlayerPosLook) {
                    mc.thePlayer.setPosition(mc.thePlayer.lastTickPosX, mc.thePlayer.lastTickPosY, mc.thePlayer.lastTickPosZ);
                }
                break;
            case WATCHDOG_EXPERIMENTAL:
                if (event.getPacket() instanceof S12PacketEntityVelocity) {
                    this.startSpoof = true;
                }
                break;
        }
    };

    @EventHandler
    private final Listener<OverlayEvent> overlayListener = e -> {
        if (Objects.requireNonNull(mode.getValue()) == DisablerModeEnum.INVADEDLANDS) {
            final String val = "Balance: " + ChatFormatting.WHITE + ticks;
            mc.fontRendererObj.drawStringWithShadow(val, (float) e.getScaledResolution().getScaledWidth() / 2 - mc.fontRendererObj.getStringWidth(val) / 2, 330, ColorModule.getColor(0));
        }
    };

    @EventHandler
    private final Listener<MotionEvent> motionEventListener = event -> {
        switch (mode.getValue()) {
            case PIKANETWORK:
                if (mc.thePlayer.hurtResistantTime > 0)
                    this.pikatrolled = true;
                break;
            case VULCAN_STRAFE:
                if(event.getEventType() == EventTypeEnum.PRE) {
                    if (mc.thePlayer.ticksExisted % 3 == 0)
                        mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, BlockPos.ORIGIN, EnumFacing.DOWN));
                }
                break;
            case VERUS:
                mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY + 1, mc.thePlayer.posZ), 256, new ItemStack(Blocks.stone.getItem(mc.theWorld, new BlockPos(0, 0, 0))), 0.5f, 0.5f, 0.5f));

                event.setOnGround(true);
                event.setY(CollisionUtils.niggerizeVerticalPosition(event.getPosY()));
                break;
            case HAZEL_MC:
                if (mc.theWorld.isAirBlock(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1.5, mc.thePlayer.posZ))) {
                    event.setOnGround(true);
                    mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1, mc.thePlayer.posZ), 255,
                            new ItemStack(Blocks.stone.getItem
                                    (mc.theWorld, new BlockPos(0, 0, 0))), 0.5f, 0.5f, 0.5f));
                    event.setY(Math.floor(mc.thePlayer.posY));
                }
                break;
            case WATCHDOG_EXPERIMENTAL:
                if (event.getEventType() == EventTypeEnum.POST)
                    return;

                if (this.startSpoof && Diablo.getInstance().getModuleRepository().getModuleInstance(SpeedModule.class).isEnabled()) {
                    if (mc.thePlayer.ticksExisted % 4 == 0) {
                        event.setOnGround(true);
                    }
                }

                break;
        }
    };



    public int getTicks() {
        return mode.getValue() == DisablerModeEnum.INVADEDLANDS ? ticks : 0;
    }
}